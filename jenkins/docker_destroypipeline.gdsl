node {
    // Mark the code checkout 'Checkout'....
    stage 'Checkout'
 
    // Get some code from a GitHub repository
    git credentialsId: 'GitHub', url: 'https://eshneken@github.com/eshneken/terraform-bmcs-weblogic-jenkins-chef.git'

    // Mark the code build 'plan'....
    stage name: 'Destroy', concurrency: 1
    dir('terraform') {
    
        // copy userdata from home and setup the terraform binaries and providers
        sh "rm -rf ./userdata"
        sh "cp -R /home/opc/userdata ."
        sh "sudo rm /usr/local/bin/terraform"
        sh "sudo ln -s /home/opc/terraform /usr/local/bin/terraform"
        sh "cp /home/opc/terraform-provider-oci ."
        
        //Remove the terraform state file so we always start from a clean state
        if (fileExists("./terraform.tfstate")) {
            sh "rm -rf .terraform/"
        }
        if (fileExists("status")) {
            sh "rm status"
        }
        if (fileExists("current_run.tfvars")) {
            sh "rm current_run.tfvars"
        }
        
        // grab the appropriate state from object storage
        sh "oci os object get -ns cloud_pursuit_appdev -bn $Environment_Identifier --name terraform.tfstate --file ./terraform.tfstate"
        sh "oci os object get -ns cloud_pursuit_appdev -bn $Environment_Identifier --name current_run.tfvars --file ./current_run.tfvars"
        
        // direct terraform to destroy the environment
        sh "terraform init"
        sh "set +e; terraform destroy -force -state=terraform.tfstate -var-file=current_run.tfvars"

        // clean up object storage
        sh "oci os object delete -ns orasenatdecaentegacpgut02 -bn $Environment_Identifier --name current_run.tfvars --force"
        sh "oci os object delete -ns orasenatdecaentegacpgut02 -bn $Environment_Identifier --name terraform.tfstate --force"
        sh "oci os bucket delete -ns orasenatdecaentegacpgut02 --name $Environment_Identifier --force"
        
        currentBuild.result = 'SUCCESS'   
        }
           
    }
